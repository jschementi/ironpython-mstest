<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= 
this.NameSpace #>
{
<# 
foreach (var import in this.Usings) { #>
    using <#= import #>;
<# 
} #>
#if SILVERLIGHT
    using Microsoft.Scripting.Silverlight;
#endif

<# 
foreach (var klass in this.Structure) { 
       var className = klass.Key;
       var methods = klass.Value;
#>

    [TestClass()]
    public class <#= className #>
    {
        private ScriptEngine engine;

        private ScriptScope module;
        
        private object klass;

        private object klassInstance;

        public <#= className #>()
        {
#if SILVERLIGHT
            var setup = DynamicApplication.CreateRuntimeSetup();
#else
            var setup = Python.CreateRuntimeSetup(new Dictionary<string, object>());
#endif
            setup.DebugMode = System.Diagnostics.Debugger.IsAttached;

            var runtime = new ScriptRuntime(setup);
            engine = Python.GetEngine(runtime);

			var file = "<#= this.FileName #>";
#if SILVERLIGHT
			var filepath = file;
#else
            var assemblyPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            var filepath = Path.Combine(assemblyPath, file);       
#endif
            module = engine.ExecuteFile(filepath);

            klass = engine.Operations.GetMember(module, "<#= className #>");
            klassInstance = ((dynamic)klass)();
        }

        private void CallPythonTestMethod(string methodName)
        {
            dynamic method = engine.Operations.GetMember(klassInstance, methodName);
            method();
        }

<# 
foreach (var method in methods) { #>
        [TestMethod()]
#if !SILVERLIGHT
<# 
foreach (var item in this.DeploymentItems) { #>
        [DeploymentItem(<# 
    for(var i = 0; i < item.Count; i++) {
        if (item[i] == null) continue;
        if (i != 0) { #>
, <#
        } #>
"<#= item[i] #>"<#
        
    } #>
)]
<#
} #>
#endif
        public void <#= method #>()
        {
            CallPythonTestMethod("<#= method #>");
        }
<# 
} #>
    }

<# 
} #>
}
